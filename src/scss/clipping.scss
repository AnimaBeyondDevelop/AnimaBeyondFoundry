@use 'sass:list';
@use 'variable';

/// Calculates the value of the corner points.
/// @param {number} $coord-x - x coordinate of the corner
/// @param {number} $coord-y - y coordinate of the corner
/// @param {number} $slant-param - vertical/horizontal size of the slanted edge
/// @return {list} - list of two values representing the points for the corner.
@function corner($coord-x, $coord-y, $slant-param) {
  @if $coord-x != $coord-y {
    @return (
      calc($coord-x - $slant-param) $coord-y,
      $coord-x calc($coord-y + $slant-param)
    );
  }
  @return (
    $coord-x calc($coord-y + $slant-param),
    calc($coord-x + $slant-param) $coord-y
  );
}

/// Calculates clipping for slanted edges in the specified columns. Takes into account a border size
/// for mantaining the borders equal. Asumes 45 degrees for the slanted lines.
/// @param {Number} $edge - vertical/horizontal size of the slanted egde. Asumed to be 45 degrees.
/// @param {Number} $border-size - border size in pixels
/// @param {list} $corners [0 1 1 1] - List indicating which corners are slanted.
/// Starting from the top left corner and advancing clockwise, a 1 indicates the corresponding corner
/// is slanted and a 0 indicates a square corner.
/// @param {Number} $outer [0] - A number indicating whether to get the outer (1) clip-path or the inner (0).
@function slanted-clip($edge, $border-size, $corners: 0 1 1 1, $outer: 0) {
  $offset: calc(($border-size * sqrt(2) - 2 * $border-size) * $outer);
  $slant-param: calc($edge - $offset);
  @return polygon(
    corner(0%, 0%, calc(list.nth($corners, 1) * $slant-param)),
    corner(100%, 0%, calc(list.nth($corners, 2) * $slant-param)),
    corner(100%, 100%, calc(-1 * list.nth($corners, 3) * $slant-param)),
    corner(0%, 100%, calc(-1 * list.nth($corners, 4) * $slant-param))
  );
}

/// Draws a border with slanted edges in the specified corners.
/// @param {Number} $edge - vertical/horizontal size of the slanted egde. Asumed to be 45 degrees.
/// @param {Number} $border-size - border size in pixels
/// @param {list} $corners [0 1 1 1] - List indicating which corners are slanted.
/// Starting from the top left corner and advancing clockwise, a 1 indicates the corresponding corner
/// is slanted and a 0 indicates a square corner.
/// @param {color} $border-color - Color used for the border.
/// Defaults to `var(--border-color, variable.$border-color)`.
/// @param {color} $bg-color - Color used for the background.
/// Defaults to `var(--border-color, variable.$background-main)`.
/// @output
@mixin slanted-edges(
  $edge,
  $border-size,
  $corners: 0 1 1 1,
  $border-color: var(--border-color, variable.$border-color),
  $bg-color: var(--bg-color, variable.$background-main)
) {
  position: relative;
  background: $border-color;
  -webkit-clip-path: slanted-clip($edge, $border-size, $corners, 1);
  clip-path: slanted-clip($edge, $border-size, $corners, 1);

  &::before {
    content: '';
    position: absolute;
    inset: $border-size;
    background: $bg-color;
    -webkit-clip-path: slanted-clip($edge, $border-size, $corners);
    clip-path: slanted-clip($edge, $border-size, $corners);
  }
}
